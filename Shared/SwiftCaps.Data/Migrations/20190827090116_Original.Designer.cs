// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SwiftCaps.Data.Context;

namespace SwiftCaps.Data.Migrations
{
    [DbContext(typeof(SwiftCapsContext))]
    [Migration("20190827090116_Original")]
    partial class Original
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SwiftCaps.Models.Models.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<Guid?>("CreatedBy");

                    b.Property<string>("CreatedByUsername");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("Updated");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("SwiftCaps.Models.Models.GroupQuiz", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<Guid?>("CreatedBy");

                    b.Property<string>("CreatedByUsername");

                    b.Property<DateTime>("EndTime");

                    b.Property<Guid>("GroupId");

                    b.Property<Guid>("QuizId");

                    b.Property<int>("Recurrence");

                    b.Property<DateTime>("StartTime");

                    b.Property<DateTime?>("Updated");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("QuizId");

                    b.ToTable("GroupQuizzes");
                });

            modelBuilder.Entity("SwiftCaps.Models.Models.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Body");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Footer");

                    b.Property<string>("Header");

                    b.Property<Guid>("QuizSectionId");

                    b.Property<int>("QuizSectionIndex");

                    b.Property<DateTime?>("Updated");

                    b.HasKey("Id");

                    b.HasIndex("QuizSectionId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("SwiftCaps.Models.Models.Quiz", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<Guid?>("CreatedBy");

                    b.Property<string>("CreatedByUsername");

                    b.Property<string>("Description");

                    b.Property<string>("InfoMarkdown");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("Updated");

                    b.HasKey("Id");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("SwiftCaps.Models.Models.QuizAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ActualAnswer");

                    b.Property<int>("AnswerIndex");

                    b.Property<int>("AnswerLength");

                    b.Property<string>("AnswerPrefix");

                    b.Property<string>("AnswerSuffix");

                    b.Property<DateTime>("Created");

                    b.Property<Guid>("QuestionId");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UserAnswer");

                    b.HasKey("Id");

                    b.ToTable("QuizAnswer");
                });

            modelBuilder.Entity("SwiftCaps.Models.Models.QuizSection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<int>("Index");

                    b.Property<Guid>("QuizId");

                    b.Property<DateTime?>("Updated");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.ToTable("QuizSections");
                });

            modelBuilder.Entity("SwiftCaps.Models.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<Guid?>("CreatedBy");

                    b.Property<string>("CreatedByUsername");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("FullName");

                    b.Property<Guid>("GroupId");

                    b.Property<string>("LastName");

                    b.Property<string>("MiddleName");

                    b.Property<string>("Title");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SwiftCaps.Models.Models.UserQuiz", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Completed");

                    b.Property<DateTime>("Created");

                    b.Property<Guid?>("CreatedBy");

                    b.Property<string>("CreatedByUsername");

                    b.Property<DateTime>("Expiry");

                    b.Property<Guid>("GroupQuizId");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("GroupQuizId");

                    b.ToTable("UserQuizzes");
                });

            modelBuilder.Entity("SwiftCaps.Models.Models.GroupQuiz", b =>
                {
                    b.HasOne("SwiftCaps.Models.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SwiftCaps.Models.Models.Quiz", "Quiz")
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SwiftCaps.Models.Models.Question", b =>
                {
                    b.HasOne("SwiftCaps.Models.Models.QuizSection")
                        .WithMany("Questions")
                        .HasForeignKey("QuizSectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SwiftCaps.Models.Models.QuizSection", b =>
                {
                    b.HasOne("SwiftCaps.Models.Models.Quiz")
                        .WithMany("QuizSections")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SwiftCaps.Models.Models.User", b =>
                {
                    b.HasOne("SwiftCaps.Models.Models.Group")
                        .WithMany("Users")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SwiftCaps.Models.Models.UserQuiz", b =>
                {
                    b.HasOne("SwiftCaps.Models.Models.GroupQuiz", "GroupQuiz")
                        .WithMany()
                        .HasForeignKey("GroupQuizId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
