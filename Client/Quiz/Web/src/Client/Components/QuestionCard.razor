<DocumentCard Type="DocumentCardType.Normal" ClassName="quizCard">
    <Stack Tokens="@(new StackTokens {Padding = 30})">
        <StackItem Align="Alignment.End">

            <IconButton IconName="Info" AriaLabel="Info" OnClick="@(args => _isDialogOpen = true)"
                        @onfocus="@(e => OnIconFocus(e))" />

            <Dialog IsBlocking="true"
                    IsOpen=@_isDialogOpen
                    OnDismiss=@(args=> _isDialogOpen=false)>
                <ChildContent>@((MarkupString)InfoText)</ChildContent>
                <FooterTemplate>
                    <PrimaryButton Text="OK" OnClick=@(args=> _isDialogOpen=false) />
                </FooterTemplate>
            </Dialog>
        </StackItem>
        @if (Question.HasDescription)
        {
            <Stack Tokens="@(new StackTokens {Padding = 10})">
                <Text Variant="TextType.Medium" ClassName="quizCardSectionTitle">Section</Text>
                <Text Variant="TextType.XxLargePlus"><b>@Question.Description</b></Text>
            </Stack>
        }
        @if (Question.HasHeader)
        {
            <Stack Tokens="@(new StackTokens {Padding = 10})">
                <BlazorFluentUI.Text Variant="TextType.XLargePlus">
                    <BlazorFluentUI.Text>@Question.Header</BlazorFluentUI.Text>
                </BlazorFluentUI.Text>
            </Stack>
        }
        <Stack Tokens="@(new StackTokens {Padding = 10})">
            <Text Variant="TextType.Medium" ClassName="quizCardSectionTitle">Question</Text>
            <BlazorFluentUI.Text As="p" Variant="TextType.XLargePlus">
                @foreach (var answer in Question.QuizAnswers)
                {
                    @if (!string.IsNullOrEmpty(answer.AnswerPrefix))
                    {
                        <BlazorFluentUI.Text>@answer.AnswerPrefix</BlazorFluentUI.Text>
                    }
                    <BlazorFluentUI.Text ClassName="quizCardWeeklyTitle" Variant="TextType.Small">@answer.AnswerIndex</BlazorFluentUI.Text>
                    <BlazorFluentUI.Text ClassName="quizCardWeeklyTitle">
                        @(new string('_', answer.AnswerLength))
                    </BlazorFluentUI.Text>
                    <BlazorFluentUI.Text>@answer.AnswerSuffix</BlazorFluentUI.Text>
                }
            </BlazorFluentUI.Text>
        </Stack>
        @if (Question.HasFooter)
        {
            <Stack Tokens="@(new StackTokens {Padding = 10})">
                <BlazorFluentUI.Text Variant="TextType.XLargePlus">
                    <BlazorFluentUI.Text>@Question.Footer</BlazorFluentUI.Text>
                </BlazorFluentUI.Text>
            </Stack>
        }
        <Text Variant="TextType.Medium" ClassName="quizCardSectionTitle">Answers</Text>
        @if (Question.QuizAnswers != null)
        {
            <Stack Tokens="@(new StackTokens{ChildrenGap = new []{10.0}})">
                @foreach (var quizAnswer in Question.QuizAnswers)
                {
                    <QuizAnswer QuestionIndex="@Question.QuizSectionIndex" Answer="@quizAnswer" AnswerChanged="@OnAnswerChanged" />
                }
            </Stack>
        }
    </Stack>
</DocumentCard>
