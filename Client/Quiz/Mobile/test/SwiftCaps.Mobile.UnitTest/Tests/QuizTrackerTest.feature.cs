// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SwiftCAPS.Mobile.UnitTest.Tests
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class QuizTrackerPageFeature : object, Xunit.IClassFixture<QuizTrackerPageFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "QuizTrackerTest.feature"
#line hidden
        
        public QuizTrackerPageFeature(QuizTrackerPageFeature.FixtureData fixtureData, SwiftCAPS_Mobile_UnitTest_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Tests", "Quiz Tracker Page", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
#line 4
testRunner.Given("I am an unauthenticated user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 5
testRunner.When("I login with Azure AD", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 6
testRunner.And("I am on the \"QuizListPage\" view", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify that 1 Weekly and 1 Monthly test is displayed when its neither the last da" +
            "y of the month nor a Sunday and time is not between 08:00:00 and 23:59:59")]
        [Xunit.TraitAttribute("FeatureTitle", "Quiz Tracker Page")]
        [Xunit.TraitAttribute("Description", "Verify that 1 Weekly and 1 Monthly test is displayed when its neither the last da" +
            "y of the month nor a Sunday and time is not between 08:00:00 and 23:59:59")]
        [Xunit.TraitAttribute("Category", "ClearSubscribers")]
        public virtual void VerifyThat1WeeklyAnd1MonthlyTestIsDisplayedWhenItsNeitherTheLastDayOfTheMonthNorASundayAndTimeIsNotBetween080000And235959()
        {
            string[] tagsOfScenario = new string[] {
                    "ClearSubscribers"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that 1 Weekly and 1 Monthly test is displayed when its neither the last da" +
                    "y of the month nor a Sunday and time is not between 08:00:00 and 23:59:59", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 9
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 10
testRunner.When("for report purpose, today is not the last day of the month between 08:00:00 and 2" +
                        "3:59:59", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 11
testRunner.And("for report purpose, today is not sunday between 08:00:00 and 23:59:59", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 12
testRunner.And("I refresh the cache", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 13
testRunner.Then("I navigate to the \"QuizTrackerPage\" view", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 14
testRunner.And("I can see the Quiz tracker with 1 weekly test and 1 monthly test", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify that 2 Weekly and 1 Monthly tests are displayed when today is a Sunday but" +
            " not the last day of the month and time is between 08:00:00 and 23:59:59")]
        [Xunit.TraitAttribute("FeatureTitle", "Quiz Tracker Page")]
        [Xunit.TraitAttribute("Description", "Verify that 2 Weekly and 1 Monthly tests are displayed when today is a Sunday but" +
            " not the last day of the month and time is between 08:00:00 and 23:59:59")]
        [Xunit.TraitAttribute("Category", "ClearSubscribers")]
        public virtual void VerifyThat2WeeklyAnd1MonthlyTestsAreDisplayedWhenTodayIsASundayButNotTheLastDayOfTheMonthAndTimeIsBetween080000And235959()
        {
            string[] tagsOfScenario = new string[] {
                    "ClearSubscribers"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that 2 Weekly and 1 Monthly tests are displayed when today is a Sunday but" +
                    " not the last day of the month and time is between 08:00:00 and 23:59:59", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 17
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 18
testRunner.When("for report purpose, today is not the last day of the month between 08:00:00 and 2" +
                        "3:59:59", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 19
testRunner.And("for report purpose, today is sunday between 08:00:00 and 23:59:59", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 20
testRunner.And("I refresh the cache", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 21
testRunner.Then("I navigate to the \"QuizTrackerPage\" view", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 22
testRunner.And("I can see the Quiz tracker with 2 weekly test and 1 monthly test", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify that 1 Weekly and 2 Monthly tests are displayed when today is the last day" +
            " of the month, but not a Sunday and time is between 08:00:00 and 23:59:59")]
        [Xunit.TraitAttribute("FeatureTitle", "Quiz Tracker Page")]
        [Xunit.TraitAttribute("Description", "Verify that 1 Weekly and 2 Monthly tests are displayed when today is the last day" +
            " of the month, but not a Sunday and time is between 08:00:00 and 23:59:59")]
        [Xunit.TraitAttribute("Category", "ClearSubscribers")]
        public virtual void VerifyThat1WeeklyAnd2MonthlyTestsAreDisplayedWhenTodayIsTheLastDayOfTheMonthButNotASundayAndTimeIsBetween080000And235959()
        {
            string[] tagsOfScenario = new string[] {
                    "ClearSubscribers"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that 1 Weekly and 2 Monthly tests are displayed when today is the last day" +
                    " of the month, but not a Sunday and time is between 08:00:00 and 23:59:59", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 25
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 26
testRunner.When("for report purpose, today is the last day of the month between 08:00:00 and 23:59" +
                        ":59", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 27
testRunner.And("for report purpose, today is not sunday between 08:00:00 and 23:59:59", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 28
testRunner.And("I refresh the cache", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 29
testRunner.Then("I navigate to the \"QuizTrackerPage\" view", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 30
testRunner.And("I can see the Quiz tracker with 1 weekly test and 2 monthly test", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify that 2 Weekly and 2 Monthly tests are displayed when today is the last day" +
            " of the month and a Sunday and time is between 08:00:00 and 23:59:59")]
        [Xunit.TraitAttribute("FeatureTitle", "Quiz Tracker Page")]
        [Xunit.TraitAttribute("Description", "Verify that 2 Weekly and 2 Monthly tests are displayed when today is the last day" +
            " of the month and a Sunday and time is between 08:00:00 and 23:59:59")]
        [Xunit.TraitAttribute("Category", "ClearSubscribers")]
        public virtual void VerifyThat2WeeklyAnd2MonthlyTestsAreDisplayedWhenTodayIsTheLastDayOfTheMonthAndASundayAndTimeIsBetween080000And235959()
        {
            string[] tagsOfScenario = new string[] {
                    "ClearSubscribers"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that 2 Weekly and 2 Monthly tests are displayed when today is the last day" +
                    " of the month and a Sunday and time is between 08:00:00 and 23:59:59", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 33
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 34
testRunner.When("for report purpose, today is the last day of the month and sunday between 08:00:0" +
                        "0 and 23:59:59", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 35
testRunner.And("I refresh the cache", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 36
testRunner.Then("I navigate to the \"QuizTrackerPage\" view", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 37
testRunner.And("I can see the Quiz tracker with 2 weekly test and 2 monthly test", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                QuizTrackerPageFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                QuizTrackerPageFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
