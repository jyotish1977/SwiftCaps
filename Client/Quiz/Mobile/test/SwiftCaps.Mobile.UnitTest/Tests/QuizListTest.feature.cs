// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SwiftCAPS.Mobile.UnitTest.Tests
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class QuizListPageFeature : object, Xunit.IClassFixture<QuizListPageFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "QuizListTest.feature"
#line hidden
        
        public QuizListPageFeature(QuizListPageFeature.FixtureData fixtureData, SwiftCAPS_Mobile_UnitTest_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Tests", "Quiz List Page", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
#line 4
    testRunner.Given("I am an unauthenticated user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 5
    testRunner.When("I login with Azure AD", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 6
 testRunner.Then("I am on the \"QuizListPage\" view", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get Incomplete User Quizzes")]
        [Xunit.TraitAttribute("FeatureTitle", "Quiz List Page")]
        [Xunit.TraitAttribute("Description", "Get Incomplete User Quizzes")]
        [Xunit.TraitAttribute("Category", "ClearSubscribers")]
        public virtual void GetIncompleteUserQuizzes()
        {
            string[] tagsOfScenario = new string[] {
                    "ClearSubscribers"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Incomplete User Quizzes", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 9
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 10
 testRunner.When("today is not the last day of the month between 08:00:00 and 23:59:59", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 11
 testRunner.And("today is not sunday between 08:00:00 and 23:59:59", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 12
    testRunner.And("I refresh the cache", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 13
    testRunner.And("I reload the quizzes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 14
 testRunner.Then("I can see a \"Incomplete\" \"Current\" \"Weekly\" quiz card with title \"F-16 CAPs\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 15
 testRunner.And("I can see a \"Incomplete\" \"Current\" \"Monthly\" quiz card with title \"F16 AIRCRAFT S" +
                        "YSTEMS SUPPLEMENTARY QUIZ (Dual qual fill up for both CD and D+)\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get Incomplete User Quizzes at end of month")]
        [Xunit.TraitAttribute("FeatureTitle", "Quiz List Page")]
        [Xunit.TraitAttribute("Description", "Get Incomplete User Quizzes at end of month")]
        [Xunit.TraitAttribute("Category", "ClearSubscribers")]
        public virtual void GetIncompleteUserQuizzesAtEndOfMonth()
        {
            string[] tagsOfScenario = new string[] {
                    "ClearSubscribers"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Incomplete User Quizzes at end of month", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 18
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 19
 testRunner.When("today is the last day of the month between 08:00:00 and 23:59:59", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 20
 testRunner.And("today is not sunday between 08:00:00 and 23:59:59", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 21
    testRunner.And("I refresh the cache", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 22
    testRunner.And("I reload the quizzes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 23
 testRunner.Then("I can see a \"Incomplete\" \"Current\" \"Weekly\" quiz card with title \"F-16 CAPs\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 24
 testRunner.And("I can see a \"Incomplete\" \"Current\" \"Monthly\" quiz card with title \"F16 AIRCRAFT S" +
                        "YSTEMS SUPPLEMENTARY QUIZ (Dual qual fill up for both CD and D+)\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 25
 testRunner.And("I can see a \"Incomplete\" \"Next\" \"Monthly\" quiz card with title \"F16 AIRCRAFT SYST" +
                        "EMS SUPPLEMENTARY QUIZ (Dual qual fill up for both CD and D+)\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get Incomplete User Quizzest at end of week")]
        [Xunit.TraitAttribute("FeatureTitle", "Quiz List Page")]
        [Xunit.TraitAttribute("Description", "Get Incomplete User Quizzest at end of week")]
        [Xunit.TraitAttribute("Category", "ClearSubscribers")]
        public virtual void GetIncompleteUserQuizzestAtEndOfWeek()
        {
            string[] tagsOfScenario = new string[] {
                    "ClearSubscribers"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Incomplete User Quizzest at end of week", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 28
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 29
 testRunner.When("today is not the last day of the month between 08:00:00 and 23:59:59", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 30
 testRunner.And("today is sunday between 08:00:00 and 23:59:59", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 31
    testRunner.And("I refresh the cache", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 32
    testRunner.And("I reload the quizzes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 33
 testRunner.Then("I can see a \"Incomplete\" \"Current\" \"Weekly\" quiz card with title \"F-16 CAPs\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 34
 testRunner.And("I can see a \"Incomplete\" \"Current\" \"Monthly\" quiz card with title \"F16 AIRCRAFT S" +
                        "YSTEMS SUPPLEMENTARY QUIZ (Dual qual fill up for both CD and D+)\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 35
 testRunner.And("I can see a \"Incomplete\" \"Next\" \"Weekly\" quiz card with title \"F-16 CAPs\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get Incomplete User Quizzes at end of week and end of month")]
        [Xunit.TraitAttribute("FeatureTitle", "Quiz List Page")]
        [Xunit.TraitAttribute("Description", "Get Incomplete User Quizzes at end of week and end of month")]
        [Xunit.TraitAttribute("Category", "ClearSubscribers")]
        public virtual void GetIncompleteUserQuizzesAtEndOfWeekAndEndOfMonth()
        {
            string[] tagsOfScenario = new string[] {
                    "ClearSubscribers"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Incomplete User Quizzes at end of week and end of month", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 38
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 39
 testRunner.When("today is the last day of the month and sunday between 08:00:00 and 23:59:59", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 40
    testRunner.And("I refresh the cache", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 41
    testRunner.And("I reload the quizzes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 42
 testRunner.Then("I can see a \"Incomplete\" \"Current\" \"Weekly\" quiz card with title \"F-16 CAPs\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 43
 testRunner.And("I can see a \"Incomplete\" \"Current\" \"Monthly\" quiz card with title \"F16 AIRCRAFT S" +
                        "YSTEMS SUPPLEMENTARY QUIZ (Dual qual fill up for both CD and D+)\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 44
 testRunner.And("I can see a \"Incomplete\" \"Next\" \"Monthly\" quiz card with title \"F16 AIRCRAFT SYST" +
                        "EMS SUPPLEMENTARY QUIZ (Dual qual fill up for both CD and D+)\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 45
 testRunner.And("I can see a \"Incomplete\" \"Next\" \"Weekly\" quiz card with title \"F-16 CAPs\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get Completed current Weekly and Monthly Quizzes")]
        [Xunit.TraitAttribute("FeatureTitle", "Quiz List Page")]
        [Xunit.TraitAttribute("Description", "Get Completed current Weekly and Monthly Quizzes")]
        [Xunit.TraitAttribute("Category", "ClearSubscribers")]
        public virtual void GetCompletedCurrentWeeklyAndMonthlyQuizzes()
        {
            string[] tagsOfScenario = new string[] {
                    "ClearSubscribers"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Completed current Weekly and Monthly Quizzes", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 48
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 49
 testRunner.When("today is not the last day of the month between 08:00:00 and 23:59:59", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 50
 testRunner.And("today is not sunday between 08:00:00 and 23:59:59", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 51
    testRunner.And("I refresh the cache", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 52
    testRunner.And("I reload the quizzes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 53
 testRunner.And("I completed the \"Current\" \"Weekly\" Quiz", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 54
 testRunner.And("I completed the \"Current\" \"Monthly\" Quiz", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 55
 testRunner.Then("I can see a \"Completed\" \"Current\" \"Weekly\" quiz card with title \"F-16 CAPs\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 56
 testRunner.And("I can see a \"Completed\" \"Current\" \"Monthly\" quiz card with title \"F16 AIRCRAFT SY" +
                        "STEMS SUPPLEMENTARY QUIZ (Dual qual fill up for both CD and D+)\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get Completed current Weekly and Incomplete Monthly Quizzes")]
        [Xunit.TraitAttribute("FeatureTitle", "Quiz List Page")]
        [Xunit.TraitAttribute("Description", "Get Completed current Weekly and Incomplete Monthly Quizzes")]
        [Xunit.TraitAttribute("Category", "ClearSubscribers")]
        public virtual void GetCompletedCurrentWeeklyAndIncompleteMonthlyQuizzes()
        {
            string[] tagsOfScenario = new string[] {
                    "ClearSubscribers"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Completed current Weekly and Incomplete Monthly Quizzes", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 59
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 60
    testRunner.When("today is not the last day of the month between 08:00:00 and 23:59:59", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 61
 testRunner.And("today is not sunday between 08:00:00 and 23:59:59", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 62
    testRunner.And("I refresh the cache", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 63
    testRunner.And("I reload the quizzes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 64
 testRunner.And("I completed the \"Current\" \"Weekly\" Quiz", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 65
    testRunner.And("The \"Current\" \"Monthly\" is incomplete", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 66
 testRunner.Then("I can see a \"Completed\" \"Current\" \"Weekly\" quiz card with title \"F-16 CAPs\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 67
 testRunner.And("I can see a \"Incomplete\" \"Current\" \"Monthly\" quiz card with title \"F16 AIRCRAFT S" +
                        "YSTEMS SUPPLEMENTARY QUIZ (Dual qual fill up for both CD and D+)\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get Incomplete current Weekly and Completed Monthly Quizzes")]
        [Xunit.TraitAttribute("FeatureTitle", "Quiz List Page")]
        [Xunit.TraitAttribute("Description", "Get Incomplete current Weekly and Completed Monthly Quizzes")]
        [Xunit.TraitAttribute("Category", "ClearSubscribers")]
        public virtual void GetIncompleteCurrentWeeklyAndCompletedMonthlyQuizzes()
        {
            string[] tagsOfScenario = new string[] {
                    "ClearSubscribers"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Incomplete current Weekly and Completed Monthly Quizzes", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 70
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 71
 testRunner.When("today is not the last day of the month between 08:00:00 and 23:59:59", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 72
 testRunner.And("today is not sunday between 08:00:00 and 23:59:59", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 73
    testRunner.And("I refresh the cache", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 74
    testRunner.And("I reload the quizzes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 75
 testRunner.And("I completed the \"Current\" \"Monthly\" Quiz", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 76
    testRunner.And("The \"Current\" \"Weekly\" is incomplete", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 77
 testRunner.Then("I can see a \"Incomplete\" \"Current\" \"Weekly\" quiz card with title \"F-16 CAPs\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 78
 testRunner.And("I can see a \"Completed\" \"Current\" \"Monthly\" quiz card with title \"F16 AIRCRAFT SY" +
                        "STEMS SUPPLEMENTARY QUIZ (Dual qual fill up for both CD and D+)\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get Completed current Weekly and Monthly Quizzes and Incomplete Weekly and Monthl" +
            "y Quizzes at end of week and end of month")]
        [Xunit.TraitAttribute("FeatureTitle", "Quiz List Page")]
        [Xunit.TraitAttribute("Description", "Get Completed current Weekly and Monthly Quizzes and Incomplete Weekly and Monthl" +
            "y Quizzes at end of week and end of month")]
        [Xunit.TraitAttribute("Category", "ClearSubscribers")]
        public virtual void GetCompletedCurrentWeeklyAndMonthlyQuizzesAndIncompleteWeeklyAndMonthlyQuizzesAtEndOfWeekAndEndOfMonth()
        {
            string[] tagsOfScenario = new string[] {
                    "ClearSubscribers"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Completed current Weekly and Monthly Quizzes and Incomplete Weekly and Monthl" +
                    "y Quizzes at end of week and end of month", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 81
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 82
 testRunner.When("today is the last day of the month and sunday between 08:00:00 and 23:59:59", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 83
    testRunner.And("I refresh the cache", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 84
    testRunner.And("I reload the quizzes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 85
 testRunner.And("I completed the \"Current\" \"Weekly\" Quiz", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 86
 testRunner.And("I completed the \"Current\" \"Monthly\" Quiz", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 87
    testRunner.And("The \"Next\" \"Monthly\" is incomplete", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 88
    testRunner.And("The \"Next\" \"Weekly\" is incomplete", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 89
 testRunner.Then("I can see a \"Completed\" \"Current\" \"Weekly\" quiz card with title \"F-16 CAPs\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 90
 testRunner.And("I can see a \"Completed\" \"Current\" \"Monthly\" quiz card with title \"F16 AIRCRAFT SY" +
                        "STEMS SUPPLEMENTARY QUIZ (Dual qual fill up for both CD and D+)\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 91
 testRunner.And("I can see a \"Incomplete\" \"Next\" \"Monthly\" quiz card with title \"F16 AIRCRAFT SYST" +
                        "EMS SUPPLEMENTARY QUIZ (Dual qual fill up for both CD and D+)\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 92
 testRunner.And("I can see a \"Incomplete\" \"Next\" \"Weekly\" quiz card with title \"F-16 CAPs\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get Completed current Weekly and Monthly Quizzes and Completed Weekly and Monthly" +
            " Quizzes at end of week and end of month")]
        [Xunit.TraitAttribute("FeatureTitle", "Quiz List Page")]
        [Xunit.TraitAttribute("Description", "Get Completed current Weekly and Monthly Quizzes and Completed Weekly and Monthly" +
            " Quizzes at end of week and end of month")]
        [Xunit.TraitAttribute("Category", "ClearSubscribers")]
        public virtual void GetCompletedCurrentWeeklyAndMonthlyQuizzesAndCompletedWeeklyAndMonthlyQuizzesAtEndOfWeekAndEndOfMonth()
        {
            string[] tagsOfScenario = new string[] {
                    "ClearSubscribers"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Completed current Weekly and Monthly Quizzes and Completed Weekly and Monthly" +
                    " Quizzes at end of week and end of month", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 95
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 96
 testRunner.When("today is the last day of the month and sunday between 08:00:00 and 23:59:59", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 97
    testRunner.And("I refresh the cache", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 98
    testRunner.And("I reload the quizzes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 99
 testRunner.And("I completed the \"Current\" \"Weekly\" Quiz", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 100
 testRunner.And("I completed the \"Current\" \"Monthly\" Quiz", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 101
 testRunner.And("I completed the \"Next\" \"Weekly\" Quiz", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 102
 testRunner.And("I completed the \"Next\" \"Monthly\" Quiz", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 103
 testRunner.Then("I can see a \"Completed\" \"Current\" \"Weekly\" quiz card with title \"F-16 CAPs\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 104
 testRunner.And("I can see a \"Completed\" \"Current\" \"Monthly\" quiz card with title \"F16 AIRCRAFT SY" +
                        "STEMS SUPPLEMENTARY QUIZ (Dual qual fill up for both CD and D+)\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 105
 testRunner.And("I can see a \"Completed\" \"Next\" \"Monthly\" quiz card with title \"F16 AIRCRAFT SYSTE" +
                        "MS SUPPLEMENTARY QUIZ (Dual qual fill up for both CD and D+)\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 106
 testRunner.And("I can see a \"Completed\" \"Next\" \"Weekly\" quiz card with title \"F-16 CAPs\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Tap on a weekly and monthly completed quiz does nothing")]
        [Xunit.TraitAttribute("FeatureTitle", "Quiz List Page")]
        [Xunit.TraitAttribute("Description", "Tap on a weekly and monthly completed quiz does nothing")]
        [Xunit.TraitAttribute("Category", "ClearSubscribers")]
        public virtual void TapOnAWeeklyAndMonthlyCompletedQuizDoesNothing()
        {
            string[] tagsOfScenario = new string[] {
                    "ClearSubscribers"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Tap on a weekly and monthly completed quiz does nothing", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 110
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 111
    testRunner.When("I refresh the cache", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 112
    testRunner.And("I reload the quizzes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 113
 testRunner.And("I completed the \"Current\" \"Weekly\" Quiz", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 114
 testRunner.And("I completed the \"Current\" \"Monthly\" Quiz", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 115
 testRunner.When("I tap on the expired \"Current\" \"Weekly\" Quiz card", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 116
 testRunner.Then("I am on the \"QuizListPage\" view", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 117
 testRunner.When("I tap on the expired \"Current\" \"Monthly\" Quiz card", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 118
 testRunner.Then("I am on the \"QuizListPage\" view", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get Incomplete current Weekly Quizzes After completing last week quiz")]
        [Xunit.TraitAttribute("FeatureTitle", "Quiz List Page")]
        [Xunit.TraitAttribute("Description", "Get Incomplete current Weekly Quizzes After completing last week quiz")]
        [Xunit.TraitAttribute("Category", "ClearSubscribers")]
        public virtual void GetIncompleteCurrentWeeklyQuizzesAfterCompletingLastWeekQuiz()
        {
            string[] tagsOfScenario = new string[] {
                    "ClearSubscribers"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Incomplete current Weekly Quizzes After completing last week quiz", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 122
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 123
 testRunner.When("today is the first day of last week", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 124
    testRunner.And("I refresh the cache", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 125
    testRunner.And("I reload the quizzes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 126
 testRunner.And("I completed the \"Current\" \"Weekly\" Quiz", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 127
 testRunner.Then("I can see a \"Completed\" \"Current\" \"Weekly\" quiz card with title \"F-16 CAPs\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 128
    testRunner.When("today is the first day of this week", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 129
    testRunner.And("I refresh the cache", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 130
    testRunner.And("I reload the quizzes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 131
    testRunner.And("The \"Current\" \"Weekly\" is incomplete", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 132
    testRunner.Then("I can see a \"Incomplete\" \"Current\" \"Weekly\" quiz card with title \"F-16 CAPs\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get Incomplete current Monthly Quizzes After completing last month quiz")]
        [Xunit.TraitAttribute("FeatureTitle", "Quiz List Page")]
        [Xunit.TraitAttribute("Description", "Get Incomplete current Monthly Quizzes After completing last month quiz")]
        [Xunit.TraitAttribute("Category", "ClearSubscribers")]
        public virtual void GetIncompleteCurrentMonthlyQuizzesAfterCompletingLastMonthQuiz()
        {
            string[] tagsOfScenario = new string[] {
                    "ClearSubscribers"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Incomplete current Monthly Quizzes After completing last month quiz", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 135
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 136
 testRunner.When("today is the first day of last month", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 137
    testRunner.And("I refresh the cache", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 138
    testRunner.And("I reload the quizzes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 139
 testRunner.And("I completed the \"Current\" \"Monthly\" Quiz", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 140
 testRunner.Then("I can see a \"Completed\" \"Current\" \"Monthly\" quiz card with title \"F16 AIRCRAFT SY" +
                        "STEMS SUPPLEMENTARY QUIZ (Dual qual fill up for both CD and D+)\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 141
    testRunner.When("today is the first day of this month", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 142
    testRunner.And("I refresh the cache", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 143
    testRunner.And("I reload the quizzes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 144
    testRunner.Then("I can see a \"Incomplete\" \"Current\" \"Monthly\" quiz card with title \"F16 AIRCRAFT S" +
                        "YSTEMS SUPPLEMENTARY QUIZ (Dual qual fill up for both CD and D+)\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get one Incomplete weekly quiz, one Complete weekly quiz and one Incomplete Month" +
            "ly Quiz")]
        [Xunit.TraitAttribute("FeatureTitle", "Quiz List Page")]
        [Xunit.TraitAttribute("Description", "Get one Incomplete weekly quiz, one Complete weekly quiz and one Incomplete Month" +
            "ly Quiz")]
        [Xunit.TraitAttribute("Category", "ClearSubscribers")]
        public virtual void GetOneIncompleteWeeklyQuizOneCompleteWeeklyQuizAndOneIncompleteMonthlyQuiz()
        {
            string[] tagsOfScenario = new string[] {
                    "ClearSubscribers"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get one Incomplete weekly quiz, one Complete weekly quiz and one Incomplete Month" +
                    "ly Quiz", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 148
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 149
 testRunner.When("today is not the last day of the month between 08:00:00 and 23:59:59", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 150
 testRunner.And("today is sunday between 08:00:00 and 23:59:59", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 151
    testRunner.And("I refresh the cache", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 152
    testRunner.And("I reload the quizzes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 153
    testRunner.And("I completed the \"Current\" \"Weekly\" Quiz", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 154
    testRunner.And("The \"Next\" \"Weekly\" is incomplete", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 155
    testRunner.And("The \"Current\" \"Monthly\" is incomplete", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 156
 testRunner.Then("I can see a \"Completed\" \"Current\" \"Weekly\" quiz card with title \"F-16 CAPs\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 157
 testRunner.Then("I can see a \"Incomplete\" \"Next\" \"Weekly\" quiz card with title \"F-16 CAPs\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 158
 testRunner.And("I can see a \"Incomplete\" \"Current\" \"Monthly\" quiz card with title \"F16 AIRCRAFT S" +
                        "YSTEMS SUPPLEMENTARY QUIZ (Dual qual fill up for both CD and D+)\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                QuizListPageFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                QuizListPageFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
