<Panel IsOpen=@_isPanelOpen
       IsLightDismiss="false"
       OnDismiss=@PanelDismissHandler
       Type="PanelType.Medium">
    <NavigationTemplate>
        <Stack Horizontal="true" Tokens="@(new StackTokens { Padding = ".5rem" })"
               HorizontalAlign="(_showBackButton) ? Alignment.SpaceBetween : Alignment.End">
            @if (_showBackButton)
                {
                <StackItem Align="Alignment.End">
                    <IconButton OnClick="OnNavigationBackClick" IconName="Back" />
                </StackItem>
                }
            <StackItem Align="Alignment.End">
                <IconButton OnClick=@PanelDismissHandler IconName="ChromeClose" />
            </StackItem>
        </Stack>
    </NavigationTemplate>
    <ChildContent>
        @if (_showSuccessMessage)
        {
            <Stack Tokens="@(new StackTokens { Padding = new CssValue(10.0), ChildrenGap = new[] { 10.0 } })">
                <Stack Horizontal="true">
                    <StackItem Tokens="@(new StackItemTokens { Padding = 5 })">
                        <Text Variant="TextType.XLargePlus">
                            <Icon Style="color: green" IconName="SkypeCircleCheck"></Icon>
                        </Text>
                    </StackItem>
                    <StackItem>
                        <Text Variant="TextType.XLargePlus">
                            Schedule @_successMessageType
                        </Text>
                    </StackItem>
                </Stack>
                <Stack Style="margin:0;">
                    <StackItem>
                        <Text Variant="TextType.Small">
                            Schedule has been @_successMessageType successfully.
                        </Text>
                    </StackItem>
                </Stack>
            </Stack>
        }
        else
        {
            <Stack Tokens="@(new StackTokens { Padding = new CssValue(10.0) })">
                <Stack ClassName="mb-10" Horizontal="true">
                    <StackItem Grow="12" ClassName="quiz-panel-column-section">
                        <Stack Tokens="@(new StackTokens { ChildrenGap = new[] { 10.0 }, Padding = "0 1rem" })">
                            <Text Variant="TextType.XLargePlus">
                                @(_mode == CommandItem.Add ? "Add Schedule" : "Edit Schedule")
                            </Text>
                        </Stack>
                    </StackItem>
                </Stack>

                <Stack Tokens="@(new StackTokens { Padding = "1rem 0" })">
                    <StackItem Tokens="@(new StackItemTokens { Margin="2.5 0 0 0" })">

                        @if (_isBusy)
                        {
                            <Spinner Size=@SpinnerSize.Large Label="Loading..." />
                        }
                        else
                        {
                            @if (_showErrorMessage)
                            {
                                <div class="ms-Grid" dir="ltr">
                                    <div class="ms-Grid-row">
                                        <div class="ms-Grid-col ms-sm12 ms-mdOffset2 ms-md8">
                                            <MessageBar MessageBarType="MessageBarType.Error" IsMultiline="false">
                                                @_scheduleSaveError
                                            </MessageBar>
                                        </div>
                                    </div>
                                </div>
                            }


                            <EditForm EditContext="editContext" OnValidSubmit="@HandleValidSubmit">
                                <DataAnnotationsValidator />

                                <Stack Tokens=@(new StackTokens { Padding = "3.6rem 0.8rem" })>

                                    @if (_isScheduleInPast)
                                    {
                                        <MessageBar Style="margin-bottom:1rem;" MessageBarType="MessageBarType.Info" IsMultiline="false">
                                            Schedule cannot be edited as it is not active.
                                        </MessageBar>
                                    }

                                    <Stack Tokens="@(new StackTokens { ChildrenGap = new[] { 20.0 } })" Horizontal="true">
                                        <StackItem Grow="3">
                                            <div class="@(_isScheduleActive? "disable-dropdown-label": "")">
                                            <Dropdown ItemsSource=@_quizOptions
                                                      @bind-SelectedOption=@(_selectedQuiz)
                                                      Label="Quiz"
                                                      Required="true"
                                                          Disabled="_isScheduleActive"
                                                      Style="width: 300px;" />
                                            </div>
                                        </StackItem>

                                        <StackItem Grow="3">
                                            <DatePicker Label="Start Date" IsRequired="true" @bind-Value="@model.StartTime"
                                                        OnSelectDate="OnStartDateChangeHandler"
                                                        MinDate="DateTime.Now.Date"
                                                        FormatDate="@(d=>d.ToString("dd/MM/yyyy"))"
                                                        Disabled="_isScheduleActive"
                                                        Style="width: 200px;" />
                                        </StackItem>
                                    </Stack>

                                    <Stack Tokens="@(new StackTokens { Padding = "1rem 0", ChildrenGap = new[] { 20.0 } })" Horizontal="true">
                                        <StackItem Grow="3">
                                            <div class="@(_isScheduleActive? "disable-dropdown-label": "")">
                                            <Dropdown ItemsSource=@_recurrenceOptions
                                                      @bind-SelectedOption=@(_selectedRecurrence)
                                                      Label="Recurrence"
                                                      Required="true"
                                                          Disabled="_isScheduleActive"
                                                      Style="width: 300px;" />
                                            </div>
                                        </StackItem>

                                        <StackItem Grow="3">
                                            <DatePicker Label="End Date" IsRequired="true" @bind-Value="@model.EndTime"
                                                        Disabled="_isScheduleInPast"
                                                        MinDate="GetMinEnddate()"
                                                        FormatDate="@(d=>d.ToString("dd/MM/yyyy"))"
                                                        IsOutOfBoundsErrorMessage="End date must greater than {0}"
                                                        Style="width: 200px;" />
                                        </StackItem>
                                    </Stack>
                                </Stack>

                                <StackItem ClassName="action-button">
                                        <PrimaryButton Disabled="_isScheduleInPast">@(_mode == CommandItem.Add ? "Save" : "Save changes")</PrimaryButton>
                                </StackItem>

                            </EditForm>

                        }

                    </StackItem>
                </Stack>
            </Stack>
        }
    </ChildContent>
</Panel>